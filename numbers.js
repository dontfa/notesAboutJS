//В JavaScript существует всего один числовой тип. Таким образом, значения 5 и 5.12 принадлежат к одному и тому же типу.
// JS использует формат 64-битных чисел двойной точности по стандарту IEEE 754.
// Это означает, что все числа в JavaScript имеют плавающую запятую. Пусть вас не обманывает запись var x = 1, на самом деле это float, равный 1.

//https://proglib.io/p/js-numbers/

console.log("//**************************************************************************************")
// константы минимального и максимального безопасных чисел
console.log(Number.MAX_SAFE_INTEGER) // 9007199254740991
console.log(Number.MIN_SAFE_INTEGER) // -9007199254740991

// не путайте их с минимальным и максимальным числом
console.log(Number.MAX_VALUE) // 1.7976931348623157e+308
console.log(Number.MIN_VALUE) // 5e-324

// проверка, находится ли число в безопасном диапазоне
console.log(Number.isSafeInteger(1.7976931348623157e+308)) // false
console.log(Number.isSafeInteger(9007199254740991)) // true
//**************************************************************************************
//Целое ли число?
Number.isInteger(5) // true
Number.isInteger(5 / 2) // false
Number.isInteger(5.00) // true

5 % 1 === 0 // true
5.5 % 1 === 0 // false
//**************************************************************************************
console.log("//**************************************************************************************")
//Изменение количества знаков после запятой
//Используйте метод Number.toFixed, который принимает количество знаков десятичной части, а возвращает строковое представление числа в нужном формате.

const a = 5.6710142
const b = 0.993

console.log(a.toFixed(2)) // '5.67'
console.log(a.toFixed(1)) // '5.7'

console.log(b.toFixed()) // '1'
console.log(b.toFixed(20)) // '0.99299999999999999378'
console.log(b.toFixed(30)) // некоторые браузеры не поддерживают более 20 символов
//Также можно воспользоваться методом Number.toPrecision, которому нужно передать количество значащих цифр числа. На выходе также получается строка:

const c = 5.6710142
const d = 0.993

console.log(c.toPrecision(2)) // '5.7'
console.log(c.toPrecision(1) )// '6'

console.log(d.toPrecision())// 0.993
console.log(d.toPrecision(20)) // 0.99299999999999999378
//****************************************************************************************************
console.log("//**************************************************************************************")
//Преобразование в экспоненциальную форму

const x = 25893210
const y = 33.1894
const z = 10000000

const p = x.toExponential() // '2.589321e+7'

y.toExponential() // '3.31894e+1'
z.toExponential() // '1e+7'
z.toExponential(2) // '1.00e+7'

// обратное преобразование

console.log(p) // '2.589321e+7'

console.log(Number(p)) // 25893210
//****************************************************************************************************
console.log("//**************************************************************************************")
console.log("Работа с большими числами")
const large = 9007199254740991n
const constructed = BigInt(9007199254740991) // 9007199254740991n
const fromString = BigInt('9007199254740991') // 9007199254740991n
const safe = BigInt(Number.MAX_SAFE_INTEGER) // 9007199254740991n

console.log(safe + 3n) // 9007199254740994n
console.log(large + safe) // 18014398509481982n

//****************************************************************************************************
console.log("//**************************************************************************************")
console.log("Преобразование в другую систему счисления\n")
const num = 3241
const bin = num.toString(2) // '110010101001'

console.log(bin)

console.log(num.toString(8)) // '6251'
console.log(num.toString(16)) // 'ca9'
console.log(num.toString(10)) // '3241'

console.log(Number.parseInt(bin, 2)) // 3241
//****************************************************************************************************
console.log("//**************************************************************************************")
console.log("Методы числовых литералов\n")
console.log((23).toString(2)) // "10111"
console.log(23..toString(2))
//****************************************************************************************************
console.log("//**************************************************************************************")
console.log("Проверка на NaN")
console.log("NaN == NaN", NaN == NaN) // false
console.log("NaN === NaN", NaN === NaN) // false

console.log("Object.is(NaN, NaN)",Object.is(NaN, NaN)) // true

console.log("isNaN(NaN)", isNaN(NaN)) // true
console.log("isNaN('abc')", isNaN('abc')) // true

console.log("Number.isNaN(NaN)", Number.isNaN(NaN)) // true
console.log("Number.isNaN('abc')", Number.isNaN('abc')) // false
console.log("Number.isNaN(+'abc')", Number.isNaN(+'abc')) // true

//****************************************************************************************************
console.log("//**************************************************************************************")
console.log("Способы округления чисел")

const x2 = 5.926

// округление вниз
console.log(Math.floor(x2)) // 5

// округление вверх
console.log(Math.ceil(x2)) // 6

// округление по правилам математики
console.log(Math.round(x2)) // 6
console.log(Math.round(5.5)) // 6

// до нужного количества цифр после точки
console.log(x2.toFixed(2)) // 5.92
console.log(x2.toPrecision(2)) // 5.9

// битовый сдвиг
// работает быстрее, чем Math.floor
// но очень неочевидно для ваших коллег
console.log(x2.toString(2))
console.log((x2 >> 0).toString(2))
console.log(x2 >> 0) // 5

//****************************************************************************************************
console.log("//**************************************************************************************")
console.log("Генерация случайного числа")
//Метод Math.random генерирует дробное число в диапазоне от 0 (включая) до 1 (не включая).
let rnd = Math.random()
console.log("Math.random():", rnd) // 0.7610368478059286

// генерация числа в диапазоне от 0 до 9
// битовый сдвиг работает как Math.floor
console.log("rnd * 10 >> 0", rnd * 10 >> 0)
console.log("Math.floor(rnd * 10)", Math.floor(rnd * 10))

// генерация числа в диапазоне [x, y)
const getRandom = (min, max) =>  Math.floor(Math.random() * (max - min + 1)) + min;

//Вот небольшой пример: создадим сет – набор уникальных значений, заполним его случайными числами с помощью метода getRandom и отсортируем:
let values = new Set()
    for (let i of Array(40)) {
        values.add(getRandom(1, 10))
    }
let arr = [...values].sort((a, b) => a - b)
// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
console.log(arr)
